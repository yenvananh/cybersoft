import 'dart:io';

List<List<dynamic>> danhSach = [];
bool? running;

void main() {
  running = true;

  while (running == true) {
    hienMenu();
  }
}

// Th√™m s·∫£n ph·∫©m v√†o danh s√°ch
themSanPham() {
  print('\n-------------------------------------------');
  print('|             TH√äM S·∫¢N PH·∫®M               |');
  print('-------------------------------------------');
  String? stt, tenSanPham, giaTien, soLuong;
  tenSanPham = nhapThongTin('T√™n s·∫£n ph·∫©m');
  giaTien = nhapThongTin('Gi√° ti·ªÅn');
  soLuong = nhapThongTin('S·ªë l∆∞·ª£ng');

  stt = (danhSach.length + 1).toString();
  danhSach.add([stt, tenSanPham, giaTien, soLuong]);
  print("\nTh√¥ng tin s·∫£n ph·∫©m \'$tenSanPham\' ƒë√£ ƒë∆∞·ª£c th√™m th√†nh c√¥ng.");
}

// Hi·ªÉn th·ªã danh s√°ch s·∫£n ph·∫©m
hienDanhSach() {
  print('\n-------------------------------------------');
  print('|           DANH S√ÅCH S·∫¢N PH·∫®M            |');
  print('-------------------------------------------');

  if (danhSach.length == 0) {
    print(
      'Th√¥ng b√°o: Danh s√°ch S·∫£n ph·∫©m ch∆∞a c√≥ d·ªØ li·ªáu. H√£y th√™m s·∫£n ph·∫©m v√†o danh s√°ch.',
    );
  } else {
    inBangDuLieu(
      headers: ['STT', 'T√™n s·∫£n ph·∫©m', 'Gi√° ti·ªÅn', 'S·ªë l∆∞·ª£ng'],
      data: danhSach,
      khoangCachCot: 4,
    );
  }

  hienMenu();
}

// Hi·ªÉn th·ªã s·∫£n ph·∫©m ƒëi·ªÉm trung b√¨nh cao nh·∫•t
timSanPham() {
  print('\n-------------------------------------------');
  print('|            T√åM KI·∫æM S·∫¢N PH·∫®M            |');
  print('-------------------------------------------');
  if (danhSach.length == 0) {
    print(
      'Th√¥ng b√°o: Danh s√°ch S·∫£n ph·∫©m ch∆∞a c√≥ d·ªØ li·ªáu n√™n kh√¥ng th·ªÉ t√¨m ki·∫øm s·∫£n ph·∫©m. H√£y th√™m s·∫£n ph·∫©m v√†o danh s√°ch.',
    );
  } else {
    var timSanPham = nhapThongTin('T√™n s·∫£n ph·∫©m c·∫ßn t√¨m');
    var dsSanPhamTimThay = [];

    for (var sp in danhSach) {
      if (chuaNoiDung(timSanPham, sp[1])) {
        dsSanPhamTimThay.add(sp);
      }
    }

    print('\n-------------------------------------------');
    print('|            K·∫æT QU·∫¢ T√åM KI·∫æM             |');
    print('-------------------------------------------');

    if (dsSanPhamTimThay.length == 0) {
      print('Th√¥ng b√°o: Kh√¥ng t√¨m th·∫•y s·∫£n ph·∫©m n√†o.');
    } else {
      inBangDuLieu(
        headers: ['STT', 'T√™n s·∫£n ph·∫©m', 'Gi√° ti·ªÅn', 'S·ªë l∆∞·ª£ng'],
        data: dsSanPhamTimThay,
        khoangCachCot: 4,
      );
    }
  }

  hienMenu();
}

banSanPham() {
  print('\n-------------------------------------------');
  print('|              B√ÅN S·∫¢N PH·∫®M               |');
  print('-------------------------------------------');
  if (danhSach.length == 0) {
    print(
      'Th√¥ng b√°o: Danh s√°ch S·∫£n ph·∫©m ch∆∞a c√≥ d·ªØ li·ªáu n√™n kh√¥ng th·ªÉ b√°n s·∫£n ph·∫©m. H√£y th√™m s·∫£n ph·∫©m v√†o danh s√°ch.',
    );
  } else {
    var timSanPham = nhapThongTin('t√™n S·∫£n ph·∫©m c·∫ßn b√°n');
    var dsSanPhamCanBan = [];

    for (var sp in danhSach) {
      if (chuaNoiDung(timSanPham, sp[1])) {
        dsSanPhamCanBan.add(sp);

        print('\n-------------------------------------------');
        print('|       TH√îNG TIN S·∫¢N PH·∫®M C·∫¶N B√ÅN        |');
        print('-------------------------------------------');

        inBangDuLieu(
          headers: ['STT', 'T√™n s·∫£n ph·∫©m', 'Gi√° ti·ªÅn', 'S·ªë l∆∞·ª£ng'],
          data: dsSanPhamCanBan,
          khoangCachCot: 4,
        );

        stdout.write(
          '\nB·∫°n mu·ªën b√°n s·∫£n ph·∫©m \'${sp[1]}\' n√†y? N·∫øu ƒê√öNG nh·∫•n [Y] ƒë·ªÉ ti·∫øp t·ª•c. N·∫øu SAI nh·∫•n [N] ƒë·ªÉ nh·∫≠p l·∫°i t√™n s·∫£n ph·∫©m c·∫ßn b√°n.\nƒê·ªÉ quay v·ªÅ m√†n h√¨nh ch√≠nh, nh·∫•n n√∫t b·∫•t k·ª≥ r·ªìi nh·∫•n Enter.\nüëâ C√¢u tr·∫£ l·ªùi c·ªßa b·∫°n: ',
        );

        String? input = stdin.readLineSync();
        input = input?.toUpperCase();
        switch (input) {
          case 'Y':
            var tenSP = sp[1];
            var soLuongSP = sp[3];
            // N·∫øu s·ªë l∆∞·ª£ng SP c√≤n > 0 th√¨ m·ªõi ti·∫øp t·ª•c h·ªèi s·ªë l∆∞·ª£ng s·∫£n ph·∫©m c·∫ßn b√°n
            if (int.parse(soLuongSP) > 0) {
              var soLuongBan;
              do {
                soLuongBan = nhapThongTin('S·ªë l∆∞·ª£ng \'$tenSP\' c·∫ßn b√°n');
                if (int.parse(soLuongBan) > int.parse(soLuongSP)) {
                  print(
                    '\nTh√¥ng b√°o: S·ªë l∆∞·ª£ng s·∫£n ph·∫©m \'$tenSP\' trong kho kh√¥ng ƒë·ªß. H√£y nh·∫≠p s·ªë l∆∞·ª£ng b√°n th·∫•p h∆°n, t·ªëi ƒëa l√† $soLuongSP.\n',
                  );
                } else {
                  // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng s·∫£n ph·∫©m
                  var soLuongCon =
                      (int.parse(soLuongSP) - int.parse(soLuongBan)).toString();
                  sp[3] = soLuongCon;
                  print(
                    'Th√¥ng b√°o: ƒê√£ b√°n $soLuongBan s·∫£n ph·∫©m \'$tenSP\'. S·ªë l∆∞·ª£ng \'$tenSP\' c√≤n l·∫°i $soLuongCon.',
                  );
                }
              } while (int.parse(soLuongBan) > int.parse(soLuongSP));
            } else {
              print(
                '\nTh√¥ng b√°o: S·∫£n ph·∫©m \'$tenSP\' ƒë√£ h·∫øt n√™n kh√¥ng th·ªÉ b√°n!',
              );
            }

            break;
          case 'N':
            banSanPham();
            break;
          default:
            hienMenu();
        }

        break;
      }
    }
  }
}

// H√†m nh·∫≠p th√¥ng tin
String nhapThongTin(String thongtin) {
  String? value;
  do {
    stdout.write('Nh·∫≠p $thongtin: ');
    value = stdin.readLineSync();

    if (value == null || value.isEmpty) {
      print('B·∫°n ch∆∞a nh·∫≠p $thongtin h·ª£p l·ªá, h√£y nh·∫≠p l·∫°i.\n');
    }
  } while (value == null || value.trim().isEmpty);

  return value;
}

// Hi·ªÉn th·ªã Menu
hienMenu() {
  print('\n===========================================');
  print('|| PH·∫¶N M·ªÄM QU·∫¢N L√ù S·∫¢N PH·∫®M - CYPERSOFT ||');
  print('===========================================');
  print(
    '[1] Th√™m S·∫£n ph·∫©m. [2] Danh s√°ch S·∫£n ph·∫©m. [3] T√¨m ki·∫øm S·∫£n ph·∫©m. [4] B√°n S·∫£n ph·∫©m. [+] Tho√°t.',
  );
  stdout.write('üëâ Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ');
  String? input = stdin.readLineSync();

  switch (input) {
    case '1':
      themSanPham();
      break;
    case '2':
      hienDanhSach();
      break;
    case '3':
      timSanPham();
      break;
    case '4':
      banSanPham();
      break;
    case '+':
      running = false;
      print('\nTh√¥ng b√°o: ƒê√£ tho√°t ch∆∞∆°ng tr√¨nh!\n');
      exit(0);
    default:
      print('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng l·ª±a ch·ªçn l·∫°i.');
  }
}

// T√≠nh ƒë·ªô d√†i chu·ªói text
int visibleLength(String text) {
  return text.runes.fold(0, (int prev, int rune) {
    bool isControlChar = (rune <= 0x1F || (rune >= 0x7F && rune <= 0x9F));
    bool isCombiningChar = (rune >= 0x0300 && rune <= 0x036F);
    return prev + (isControlChar || isCombiningChar ? 0 : 1);
  });
}

// Canh ph·∫£i chu·ªói text cho b·∫±ng ƒë·ªô d√†i width
String padTextRight(String text, int width) {
  int padLength = width - visibleLength(text);
  return text + ' ' * (padLength > 0 ? padLength : 0);
}

// H√†m t√¨m ki·∫øm chu·ªói c√≥ ch·ª©a k√Ω t·ª±
bool chuaNoiDung(String chuoiTim, String chuoiSoSanh) {
  // Chuy·ªÉn c·∫£ hai chu·ªói v·ªÅ ch·ªØ th∆∞·ªùng ƒë·ªÉ kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng
  String tim = chuoiTim.toLowerCase();
  String soSanh = chuoiSoSanh.toLowerCase();

  // chuoiSoSanh c√≥ ch·ª©a n·ªôi dung chuoiTim th√¨ tr·∫£ v·ªÅ true
  return soSanh.contains(tim);
}

// H√†m in b·∫£ng d·ªØ li·ªáu theo c·ªôt
void inBangDuLieu({
  required var headers,
  required var data,
  int khoangCachCot = 3,
}) {
  // T√≠nh ƒë·ªô d√†i hi·ªÉn th·ªã th·ª±c t·∫ø c·ªßa chu·ªói
  int visibleLength(String text) {
    return text.runes.fold(0, (int prev, int rune) {
      bool isControlChar = (rune <= 0x1F || (rune >= 0x7F && rune <= 0x9F));
      bool isCombiningChar = (rune >= 0x0300 && rune <= 0x036F);
      return prev + (isControlChar || isCombiningChar ? 0 : 1);
    });
  }

  // Canh ph·∫£i chu·ªói theo chi·ªÅu r·ªông width
  String padTextRight(String text, int width) {
    int padLength = width - visibleLength(text);
    return text + ' ' * (padLength > 0 ? padLength : 0);
  }

  // T√≠nh chi·ªÅu r·ªông l·ªõn nh·∫•t cho m·ªói c·ªôt
  List<int> colWidths = List.generate(headers.length, (i) {
    int maxLen = visibleLength(headers[i]);
    for (var row in data) {
      String cell = row[i].toString();
      int len = visibleLength(cell);
      if (len > maxLen) maxLen = len;
    }
    return maxLen + khoangCachCot;
  });

  // In ti√™u ƒë·ªÅ
  for (int i = 0; i < headers.length; i++) {
    stdout.write(padTextRight(headers[i], colWidths[i]));
  }
  print('');

  // In t·ª´ng d√≤ng d·ªØ li·ªáu
  for (var row in data) {
    for (int i = 0; i < row.length; i++) {
      stdout.write(padTextRight(row[i].toString(), colWidths[i]));
    }
    print('');
  }
}
