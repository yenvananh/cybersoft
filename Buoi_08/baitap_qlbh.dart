import 'dart:io';

List<Map<String, String>> danhsachSP = [];
bool? running;

void main() {
  running = true;

  while (running == true) {
    hienMenu();
  }
}

// Hi·ªÉn th·ªã Menu
hienMenu() {
  print('\n=========================================================');
  print('||        PH·∫¶N M·ªÄM QU·∫¢N L√ù GI·ªé H√ÄNG - CYPERSOFT        ||');
  print('=========================================================');
  print(
    '[1] Th√™m s·∫£n ph·∫©m. [2] S·ª≠a s·∫£n ph·∫©m. [3] X√≥a s·∫£n ph·∫©m. [4] Hi·ªÉn th·ªã gi·ªè h√†ng. [0] Tho√°t.',
  );
  stdout.write('üëâ Nh·∫≠p l·ª±a ch·ªçn c·ªßa b·∫°n: ');
  String? input = stdin.readLineSync();

  switch (input) {
    case '1':
      themSP();
      break;
    case '2':
      suaSP();
      break;
    case '3':
      xoaSP();
      break;
    case '4':
      hienthiGioHang();
      break;
    case '0':
      running = false;
      print('Th√¥ng b√°o: ƒê√£ tho√°t ch∆∞∆°ng tr√¨nh!\n');
      exit(0);
    default:
      print('‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá. Vui l√≤ng l·ª±a ch·ªçn l·∫°i.');
  }
}

// Th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng
themSP() {
  print('\n---------------------------------------------------------');
  print('|              TH√äM S·∫¢N PH·∫®M V√ÄO GI·ªé H√ÄNG               |');
  print('---------------------------------------------------------');
  Map<String, String> sanpham = {};
  sanpham['STT'] = (danhsachSP.length).toString();
  sanpham['T√™n s·∫£n ph·∫©m'] = nhapThongTin('T√™n s·∫£n ph·∫©m');
  sanpham['S·ªë l∆∞·ª£ng'] = nhapThongTin('S·ªë l∆∞·ª£ng');
  sanpham['ƒê∆°n gi√°'] = nhapThongTin('ƒê∆°n gi√°');
  sanpham['Th√†nh ti·ªÅn'] = '0';

  danhsachSP.add(sanpham);
}

capnhatSP() {
  for (int i = 0; i < danhsachSP.length; i++) {
    danhsachSP[i]['STT'] = (i + 1).toString();
    danhsachSP[i]['Th√†nh ti·ªÅn'] =
        (int.parse(danhsachSP[i]['ƒê∆°n gi√°'] ?? '0') *
                int.parse(danhsachSP[i]['S·ªë l∆∞·ª£ng'] ?? '0'))
            .toString();
  }
}

// S·ª≠a s·∫£n ph·∫©m trong gi·ªè h√†ng
suaSP() {
  capnhatSP();
  print('\n---------------------------------------------------------');
  print('|                S·ª¨A TH√îNG TIN S·∫¢N PH·∫®M                 |');
  print('---------------------------------------------------------');

  if (danhsachSP.length == 0) {
    print(
      'Th√¥ng b√°o: Gi·ªè h√†ng ch∆∞a c√≥ s·∫£n ph·∫©m n√™n kh√¥ng th·ªÉ x√≥a. H√£y th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng.',
    );
  } else {
    inBangDuLieu(
      headers: ['STT', 'T√™n s·∫£n ph·∫©m', 'S·ªë l∆∞·ª£ng', 'ƒê∆°n gi√°', 'Th√†nh ti·ªÅn'],
      data: danhsachSP,
      khoangCachCot: 4,
    );
    print('---------------------------------------------------------');

    stdout.write('Nh·∫≠p STT c·ªßa s·∫£n ph·∫©m b·∫°n mu·ªën s·ª≠a: ');
    String? value = stdin.readLineSync();
    // T√¨m s·∫£n ph·∫©m c√≥ STT kh·ªõp
    for (var sp in danhsachSP) {
      if (sp['STT'] == value) {
        // T√™n s·∫£n ph·∫©m
        stdout.write(
          'Nh·∫≠p t√™n s·∫£n ph·∫©m m·ªõi (Enter ƒë·ªÉ gi·ªØ nguy√™n: "${sp['T√™n s·∫£n ph·∫©m']}"): ',
        );
        String? tenMoi = stdin.readLineSync();
        if (tenMoi != null && tenMoi.trim().isNotEmpty) {
          sp['T√™n s·∫£n ph·∫©m'] = tenMoi;
        }

        // S·ªë l∆∞·ª£ng
        stdout.write(
          'Nh·∫≠p s·ªë l∆∞·ª£ng m·ªõi (Enter ƒë·ªÉ gi·ªØ nguy√™n: "${sp['S·ªë l∆∞·ª£ng']}"): ',
        );
        String? soLuongMoi = stdin.readLineSync();
        if (soLuongMoi != null && soLuongMoi.trim().isNotEmpty) {
          sp['S·ªë l∆∞·ª£ng'] = soLuongMoi;
        }

        // ƒê∆°n gi√°
        stdout.write(
          'Nh·∫≠p ƒë∆°n gi√° m·ªõi (Enter ƒë·ªÉ gi·ªØ nguy√™n: "${sp['ƒê∆°n gi√°']}"): ',
        );
        String? donGiaMoi = stdin.readLineSync();
        if (donGiaMoi != null && donGiaMoi.trim().isNotEmpty) {
          sp['ƒê∆°n gi√°'] = donGiaMoi;
        }

        print('‚úÖ ƒê√£ c·∫≠p nh·∫≠t s·∫£n ph·∫©m c√≥ STT = $value');
      }
    }

    hienthiGioHang();
  }
}

// X√≥a s·∫£n ph·∫©m trong gi·ªè h√†ng
xoaSP() {
  capnhatSP();
  print('\n---------------------------------------------------------');
  print('|                     X√ìA S·∫¢N PH·∫®M                      |');
  print('---------------------------------------------------------');

  if (danhsachSP.length == 0) {
    print(
      'Th√¥ng b√°o: Gi·ªè h√†ng ch∆∞a c√≥ s·∫£n ph·∫©m n√™n kh√¥ng th·ªÉ x√≥a. H√£y th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng.',
    );
  } else {
    inBangDuLieu(
      headers: ['STT', 'T√™n s·∫£n ph·∫©m', 'S·ªë l∆∞·ª£ng', 'ƒê∆°n gi√°', 'Th√†nh ti·ªÅn'],
      data: danhsachSP,
      khoangCachCot: 4,
    );
    print('---------------------------------------------------------');

    stdout.write('Nh·∫≠p STT c·ªßa s·∫£n ph·∫©m b·∫°n mu·ªën x√≥a: ');
    String? value;
    value = stdin.readLineSync();
    danhsachSP.removeWhere((sp) => sp['STT'] == value);
    hienthiGioHang();
  }
}

// Hi·ªÉn th·ªã gi·ªè h√†ng
hienthiGioHang() {
  capnhatSP();
  print('\n---------------------------------------------------------');
  print('|                       GI·ªé H√ÄNG                        |');
  print('---------------------------------------------------------');

  if (danhsachSP.length == 0) {
    print(
      'Th√¥ng b√°o: Gi·ªè h√†ng ch∆∞a c√≥ s·∫£n ph·∫©m. H√£y th√™m s·∫£n ph·∫©m v√†o gi·ªè h√†ng.',
    );
  } else {
    inBangDuLieu(
      headers: ['STT', 'T√™n s·∫£n ph·∫©m', 'S·ªë l∆∞·ª£ng', 'ƒê∆°n gi√°', 'Th√†nh ti·ªÅn'],
      data: danhsachSP,
      khoangCachCot: 4,
    );

    inTongTien();
  }

  hienMenu();
}

// H√†m nh·∫≠p th√¥ng tin
String nhapThongTin(String thongtin) {
  String? value;
  do {
    stdout.write('Nh·∫≠p $thongtin: ');
    value = stdin.readLineSync();

    if (value == null || value.isEmpty) {
      print('B·∫°n ch∆∞a nh·∫≠p $thongtin h·ª£p l·ªá, h√£y nh·∫≠p l·∫°i.\n');
    }
  } while (value == null || value.trim().isEmpty);

  return value;
}

// H√†m in b·∫£ng d·ªØ li·ªáu theo c·ªôt
void inBangDuLieu({
  required List<String> headers,
  required List<Map<String, String>> data,
  int khoangCachCot = 3,
}) {
  // T√≠nh ƒë·ªô d√†i hi·ªÉn th·ªã th·ª±c t·∫ø c·ªßa chu·ªói
  int visibleLength(String text) {
    return text.runes.fold(0, (int prev, int rune) {
      bool isControlChar = (rune <= 0x1F || (rune >= 0x7F && rune <= 0x9F));
      bool isCombiningChar = (rune >= 0x0300 && rune <= 0x036F);
      return prev + (isControlChar || isCombiningChar ? 0 : 1);
    });
  }

  // CƒÉn l·ªÅ ph·∫£i chu·ªói
  String padTextRight(String text, int width) {
    int padLength = width - visibleLength(text);
    return text + ' ' * (padLength > 0 ? padLength : 0);
  }

  // T√≠nh chi·ªÅu r·ªông t·ªëi ƒëa cho t·ª´ng c·ªôt
  List<int> colWidths = List.generate(headers.length, (i) {
    String header = headers[i];
    int maxLen = visibleLength(header);
    for (var row in data) {
      String cell = row[header] ?? '';
      int len = visibleLength(cell);
      if (len > maxLen) maxLen = len;
    }
    return maxLen + khoangCachCot;
  });

  // In d√≤ng ti√™u ƒë·ªÅ
  for (int i = 0; i < headers.length; i++) {
    stdout.write(padTextRight(headers[i], colWidths[i]));
  }
  print('');

  // In d·ªØ li·ªáu t·ª´ng d√≤ng
  for (var row in data) {
    for (int i = 0; i < headers.length; i++) {
      String cell = row[headers[i]] ?? '';
      stdout.write(padTextRight(cell, colWidths[i]));
    }
    print('');
  }
}

inTongTien() {
  // In t·ªïng ti·ªÅn thanh to√°n
  int tong = 0;

  for (var sp in danhsachSP) {
    String? giaStr = sp['Th√†nh ti·ªÅn'];
    if (giaStr != null) {
      int gia = int.tryParse(giaStr) ?? 0;
      tong += gia;
    }
  }
  print('---------------------------------------------------------');
  print('T·ªîNG TI·ªÄN: $tong');
}
